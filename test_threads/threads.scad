
// Examples:
//metric_threaded_rod(8, 1, 10);
//metric_thread_tap(8, 1, 10);
//english_threaded_rod(1/4, 20, 1);

// Rohloff hub thread:
//metric_thread_tap(34, 1, 10, n_starts=6);


// ----------------------------------------------------------------------------
unit_circle = [ 
   [1.00000, 0.00000], [0.99211, 0.12533], [0.96858, 0.24869], [0.92978, 0.36812], [0.87631, 0.48175], [0.80902, 0.58779], [0.72897, 0.68455], [0.63742, 0.77051], [0.53583, 0.84433], [0.42578, 0.90483], [0.30902, 0.95106], [0.18738, 0.98229], [0.06279, 0.99803], [-0.06279, 0.99803], [-0.18738, 0.98229], [-0.30902, 0.95106], [-0.42578, 0.90483], [-0.53583, 0.84433], [-0.63742, 0.77051], [-0.72897, 0.68455], [-0.80902, 0.58779], [-0.87631, 0.48175], [-0.92978, 0.36812], [-0.96858, 0.24869], [-0.99211, 0.12533], [-1.00000, 0.00000], [-0.99211, -0.12533], [-0.96858, -0.24869], [-0.92978, -0.36812], [-0.87631, -0.48175], [-0.80902, -0.58779], [-0.72897, -0.68455], [-0.63742, -0.77051], [-0.53583, -0.84433], [-0.42578, -0.90483], [-0.30902, -0.95106], [-0.18738, -0.98229], [-0.06279, -0.99803], [0.06279, -0.99803], [0.18738, -0.98229], [0.30902, -0.95106], [0.42578, -0.90483], [0.53583, -0.84433], [0.63742, -0.77051], [0.72897, -0.68455], [0.80902, -0.58779], [0.87631, -0.48175], [0.92978, -0.36812], [0.96858, -0.24869], [0.99211, -0.12533]
];


// ----------------------------------------------------------------------------
// n_starts - number of thread starts (e.g., DNA, a "double helix," has
//            n_starts=2).  See wikipedia Screw_thread.
module metric_thread_tap(diameter=8, pitch=1, length=10, n_starts=1)
// In mm.
   // Note: do not use this to make a bolt or threaded rod.  This is for
   // internal threads!  difference() this from the object to be threaded.
{

   // In units of pitch.
   internal_thread_depth = [
      [-0.04330, 0.00000], [-0.04296, -0.00543], [-0.03775, -0.00969], [-0.00403, -0.00159], [0.02656, 0.01460], [0.05255, 0.03818], [0.07260, 0.06818], [0.08556, 0.10343], [0.09049, 0.14259], [0.08665, 0.18415], [0.07359, 0.22650], [0.05112, 0.26797], [0.01930, 0.30683], [-0.02148, 0.34141], [-0.07059, 0.37005], [-0.12712, 0.39123], [-0.18990, 0.40356], [-0.25754, 0.40582], [-0.32846, 0.39703], [-0.39457, 0.37052], [-0.43789, 0.31815], [-0.47431, 0.26076], [-0.50326, 0.19925], [-0.52426, 0.13461], [-0.53700, 0.06784], [-0.54127, 0.00000], [-0.53700, -0.06784], [-0.52426, -0.13461], [-0.50326, -0.19925], [-0.47431, -0.26076], [-0.43789, -0.31815], [-0.39457, -0.37052], [-0.32846, -0.39703], [-0.25754, -0.40582], [-0.18990, -0.40356], [-0.12712, -0.39123], [-0.07059, -0.37005], [-0.02148, -0.34141], [0.01930, -0.30683], [0.05112, -0.26797], [0.07359, -0.22650], [0.08665, -0.18415], [0.09049, -0.14259], [0.08556, -0.10343], [0.07260, -0.06818], [0.05255, -0.03818], [0.02656, -0.01460], [-0.00403, 0.00159], [-0.03775, 0.00969], [-0.04296, 0.00543]
   ];

   internal_thread_depth_2_start = [
      [-0.04330, 0.00000], [-0.03866, -0.00488], [0.02936, 0.00754], [0.09260, 0.03666], [0.14799, 0.08136], [0.19267, 0.13999], [0.22411, 0.21046], [0.24013, 0.29027], [0.23898, 0.37657], [0.21940, 0.46624], [0.16726, 0.51477], [0.10142, 0.53168], [0.03399, 0.54020], [-0.03399, 0.54020], [-0.10142, 0.53168], [-0.16726, 0.51477], [-0.21940, 0.46624], [-0.23898, 0.37657], [-0.24013, 0.29027], [-0.22411, 0.21046], [-0.19267, 0.13999], [-0.14799, 0.08136], [-0.09260, 0.03666], [-0.02936, 0.00754], [0.03866, -0.00488], [0.04330, 0.00000], [0.03866, 0.00488], [-0.02936, -0.00754], [-0.09260, -0.03666], [-0.14799, -0.08136], [-0.19267, -0.13999], [-0.22411, -0.21046], [-0.24013, -0.29027], [-0.23898, -0.37657], [-0.21940, -0.46624], [-0.16726, -0.51477], [-0.10142, -0.53168], [-0.03399, -0.54020], [0.03399, -0.54020], [0.10142, -0.53168], [0.16726, -0.51477], [0.21940, -0.46624], [0.23898, -0.37657], [0.24013, -0.29027], [0.22411, -0.21046], [0.19267, -0.13999], [0.14799, -0.08136], [0.09260, -0.03666], [0.02936, -0.00754], [-0.03866, 0.00488]
   ];


   internal_thread_depth_6_start = [
      [-0.04330, 0.00000], [0.09881, 0.01248], [0.29778, 0.07646], [0.47910, 0.18969], [0.47431, 0.26076], [0.43789, 0.31815], [0.27462, 0.25788], [0.10764, 0.13012], [-0.02088, -0.03290], [0.01291, 0.02743], [0.07359, 0.22650], [0.08357, 0.43810], [0.03399, 0.54020], [-0.03399, 0.54020], [-0.08357, 0.43810], [-0.07359, 0.22650], [-0.01291, 0.02743], [0.02088, -0.03290], [-0.10764, 0.13012], [-0.27462, 0.25788], [-0.43789, 0.31815], [-0.47431, 0.26076], [-0.47910, 0.18969], [-0.29778, 0.07646], [-0.09881, 0.01248], [0.04330, 0.00000], [-0.09881, -0.01248], [-0.29778, -0.07646], [-0.47910, -0.18969], [-0.47431, -0.26076], [-0.43789, -0.31815], [-0.27462, -0.25788], [-0.10764, -0.13012], [0.02088, 0.03290], [-0.01291, -0.02743], [-0.07359, -0.22650], [-0.08357, -0.43810], [-0.03399, -0.54020], [0.03399, -0.54020], [0.08357, -0.43810], [0.07359, -0.22650], [0.01291, -0.02743], [-0.02088, 0.03290], [0.10764, -0.13012], [0.27462, -0.25788], [0.43789, -0.31815], [0.47431, -0.26076], [0.47910, -0.18969], [0.29778, -0.07646], [0.09881, -0.01248]
   ];


   if (n_starts == 1) {
      linear_extrude(height=length, twist=360*length/(n_starts*pitch), $fn=n_starts*pitch*25)
         polygon(diameter/2*unit_circle - pitch*internal_thread_depth);
   } else if (n_starts == 2) {
      linear_extrude(height=length, twist=360*length/(n_starts*pitch), $fn=n_starts*pitch*25)
         polygon(diameter/2*unit_circle - pitch*internal_thread_depth_2_start);
   } else if (n_starts == 6) {
      linear_extrude(height=length, twist=360*length/(n_starts*pitch), $fn=n_starts*pitch*25)
         polygon(diameter/2*unit_circle - pitch*internal_thread_depth_6_start);
   } else {
      echo("---------------------------------------------------------------------------------------");
      echo(str("ERROR: n_starts = ", n_starts, " not available."));
      echo("Use threads.xslx to create polygon like internal_thread_depth_2_start.");
      echo("---------------------------------------------------------------------------------------");
   }
}


// ----------------------------------------------------------------------------
// Note: units of measure in drawing are mm!
module english_thread_tap(diameter=0.25, threads_per_inch=20, length=0.5, n_starts=1)
{
   // Convert to mm.
   mm_diameter = diameter*25.4;
   mm_pitch = (1.0/threads_per_inch)*25.4;
   mm_length = length*25.4;

   echo(str("mm_diameter: ", mm_diameter));
   echo(str("mm_pitch: ", mm_pitch));
   echo(str("mm_length: ", mm_length));
   metric_thread_tap(mm_diameter, mm_pitch, mm_length, n_starts);
}


// ----------------------------------------------------------------------------
module metric_threaded_rod(diameter=8, pitch=1, length=10, n_starts=1)
// In mm.
{

   // In units of pitch.
   external_thread_depth = [
      [0.00000, 0.00000], [0.00000, 0.00000], [0.00000, 0.00000], [0.00000, 0.00000], [0.02656, 0.01460], [0.05255, 0.03818], [0.07260, 0.06818], [0.08556, 0.10343], [0.09049, 0.14259], [0.08665, 0.18415], [0.07359, 0.22650], [0.05112, 0.26797], [0.01930, 0.30683], [-0.02148, 0.34141], [-0.07059, 0.37005], [-0.12712, 0.39123], [-0.18990, 0.40356], [-0.25754, 0.40582], [-0.32846, 0.39703], [-0.40088, 0.37645], [-0.46417, 0.33724], [-0.50277, 0.27640], [-0.53345, 0.21121], [-0.55572, 0.14268], [-0.56922, 0.07191], [-0.57374, 0.00000], [-0.56922, -0.07191], [-0.55572, -0.14268], [-0.53345, -0.21121], [-0.50277, -0.27640], [-0.46417, -0.33724], [-0.40088, -0.37645], [-0.32846, -0.39703], [-0.25754, -0.40582], [-0.18990, -0.40356], [-0.12712, -0.39123], [-0.07059, -0.37005], [-0.02148, -0.34141], [0.01930, -0.30683], [0.05112, -0.26797], [0.07359, -0.22650], [0.08665, -0.18415], [0.09049, -0.14259], [0.08556, -0.10343], [0.07260, -0.06818], [0.05255, -0.03818], [0.02656, -0.01460], [0.00000, 0.00000], [0.00000, 0.00000], [0.00000, 0.00000]
   ];
   external_thread_depth_2_start = [
      [0.00000, 0.00000], [0.00000, 0.00000], [0.02936, 0.00754], [0.09260, 0.03666], [0.14799, 0.08136], [0.19267, 0.13999], [0.22411, 0.21046], [0.24013, 0.29027], [0.23898, 0.37657], [0.21940, 0.46624], [0.17730, 0.54566], [0.10751, 0.56358], [0.03603, 0.57261], [-0.03603, 0.57261], [-0.10751, 0.56358], [-0.17730, 0.54566], [-0.21940, 0.46624], [-0.23898, 0.37657], [-0.24013, 0.29027], [-0.22411, 0.21046], [-0.19267, 0.13999], [-0.14799, 0.08136], [-0.09260, 0.03666], [-0.02936, 0.00754], [0.00000, 0.00000], [0.00000, 0.00000], [0.00000, 0.00000], [-0.02936, -0.00754], [-0.09260, -0.03666], [-0.14799, -0.08136], [-0.19267, -0.13999], [-0.22411, -0.21046], [-0.24013, -0.29027], [-0.23898, -0.37657], [-0.21940, -0.46624], [-0.17730, -0.54566], [-0.10751, -0.56358], [-0.03603, -0.57261], [0.03603, -0.57261], [0.10751, -0.56358], [0.17730, -0.54566], [0.21940, -0.46624], [0.23898, -0.37657], [0.24013, -0.29027], [0.22411, -0.21046], [0.19267, -0.13999], [0.14799, -0.08136], [0.09260, -0.03666], [0.02936, -0.00754], [0.00000, 0.00000]
   ];
   external_thread_depth_6_start = [
      [0.00000, 0.00000], [0.09881, 0.01248], [0.29778, 0.07646], [0.47910, 0.18969], [0.50277, 0.27640], [0.46417, 0.33724], [0.27462, 0.25788], [0.10764, 0.13012], [0.00000, 0.00000], [0.01291, 0.02743], [0.07359, 0.22650], [0.08357, 0.43810], [0.03603, 0.57261], [-0.03603, 0.57261], [-0.08357, 0.43810], [-0.07359, 0.22650], [-0.01291, 0.02743], [0.00000, 0.00000], [-0.10764, 0.13012], [-0.27462, 0.25788], [-0.46417, 0.33724], [-0.50277, 0.27640], [-0.47910, 0.18969], [-0.29778, 0.07646], [-0.09881, 0.01248], [0.00000, 0.00000], [-0.09881, -0.01248], [-0.29778, -0.07646], [-0.47910, -0.18969], [-0.50277, -0.27640], [-0.46417, -0.33724], [-0.27462, -0.25788], [-0.10764, -0.13012], [0.00000, 0.00000], [-0.01291, -0.02743], [-0.07359, -0.22650], [-0.08357, -0.43810], [-0.03603, -0.57261], [0.03603, -0.57261], [0.08357, -0.43810], [0.07359, -0.22650], [0.01291, -0.02743], [0.00000, 0.00000], [0.10764, -0.13012], [0.27462, -0.25788], [0.46417, -0.33724], [0.50277, -0.27640], [0.47910, -0.18969], [0.29778, -0.07646], [0.09881, -0.01248]
   ];

   thread = diameter/2*unit_circle - pitch*external_thread_depth;

   if (n_starts == 1) {
      linear_extrude(height=length, twist=360*length/(n_starts*pitch), $fn=n_starts*pitch*25)
         polygon(diameter/2*unit_circle - pitch*external_thread_depth);
   } else if (n_starts == 2) {
      linear_extrude(height=length, twist=360*length/(n_starts*pitch), $fn=n_starts*pitch*25)
         polygon(diameter/2*unit_circle - pitch*external_thread_depth_2_start);
   } else if (n_starts == 6) {
      linear_extrude(height=length, twist=360*length/(n_starts*pitch), $fn=n_starts*pitch*25)
         polygon(diameter/2*unit_circle - pitch*external_thread_depth_6_start);
   } else {
      echo("---------------------------------------------------------------------------------------");
      echo(str("ERROR: n_starts = ", n_starts, " not available."));
      echo("Use threads.xslx to create polygon like external_thread_depth_2_start.");
      echo("---------------------------------------------------------------------------------------");
   }
}


// ----------------------------------------------------------------------------
// Note: units of measure in drawing are mm!
module english_threaded_rod(diameter=0.25, threads_per_inch=20, length=0.5, n_starts=1)
{
   // Convert to mm.
   mm_diameter = diameter*25.4;
   mm_pitch = (1.0/threads_per_inch)*25.4;
   mm_length = length*25.4;

   echo(str("mm_diameter: ", mm_diameter));
   echo(str("mm_pitch: ", mm_pitch));
   echo(str("mm_length: ", mm_length));
   metric_threaded_rod(mm_diameter, mm_pitch, mm_length, n_starts);
}


